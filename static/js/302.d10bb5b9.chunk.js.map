{"version":3,"file":"static/js/302.d10bb5b9.chunk.js","mappings":"2NACA,EAAuB,0B,4BCMVA,EAAc,WACzB,IACMC,GAAWC,EAAAA,EAAAA,KADG,SAAAC,GAAK,OAAIA,EAAMF,SAASA,QAAnB,IAEnBG,GAAWC,EAAAA,EAAAA,MAsBjB,OACE,kBAAMC,SArBkB,SAAAC,GACxBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OACnB,EAGIH,EAAMI,cAFIC,EADd,EACE,GAAKC,MACOC,EAFd,EAEE,GAAKD,MAILZ,EAASc,OAAS,GAClBd,EAASe,MAAK,SAAAC,GAAO,OAAIA,EAAQL,OAASA,CAArB,IAErBM,MAAM,GAAD,OAAIN,EAAJ,2BAIPA,GAAQE,GAAUV,GAASe,EAAAA,EAAAA,IAAW,CAAEP,KAAAA,EAAME,OAAAA,KAC9CL,EAAKW,QACN,EAGoCC,UAAWC,EAA9C,WACE,SAACC,EAAA,EAAD,CACEC,KAAK,OACLZ,KAAK,OACLa,MAAM,OACNC,KAAK,QACLC,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,KAGV,SAACN,EAAA,EAAD,CACEC,KAAK,MACLZ,KAAK,SACLa,MAAM,SACNE,QAAQ,qGACRC,MAAM,+FACNC,UAAQ,KAGV,SAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYL,KAAK,QAAQF,KAAK,SAA9C,2BAKL,ECpDYQ,EAAU,SAAC,GAA0B,IAAxBpB,EAAuB,EAAvBA,KAAME,EAAiB,EAAjBA,OAAQmB,EAAS,EAATA,GAChC7B,GAAWC,EAAAA,EAAAA,MAIjB,OACE,2BACGO,EADH,KACWE,GACT,SAACgB,EAAA,EAAD,CAAQC,QAAQ,YAAYL,KAAK,QAAQd,KAAMqB,EAAIC,QANlC,WACnB9B,GAAS+B,EAAAA,EAAAA,IAAcF,GACxB,EAIG,sBAKL,ECJYG,EAAc,WACzB,IACQnC,GAAaC,EAAAA,EAAAA,KADA,SAAAC,GAAK,OAAIA,EAAMF,QAAV,IAClBA,SAKFoC,EAjBmB,SAACC,EAAaC,GACvC,OAAID,GAA+B,OAAhBA,GAAwBC,EAClCA,EAAaC,QAAO,SAAAvB,GACzB,OAAOA,EAAQL,KAAK6B,cAAcC,SAASJ,EAAYG,cACxD,IAEMF,CAEV,CASyBI,EAFJzC,EAAAA,EAAAA,KADF,SAAAC,GAAK,OAAIA,EAAMqC,MAAV,IAGiCvC,GAExD,OACE,wBACGoC,GACCA,EAAgBO,KAAI,YAA2B,IAAxBX,EAAuB,EAAvBA,GAAIrB,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OAC/B,OACE,yBACE,SAACkB,EAAD,CAASpB,KAAMA,EAAME,OAAQA,EAAQmB,GAAIA,KADlCA,EAIZ,KAGR,E,QC/BYY,EAAS,WACpB,IAAMzC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,8BAEE,SAACkB,EAAA,EAAD,CACEuB,SAToB,SAAAvC,GACxB,IAAQM,EAAUN,EAAMI,cAAhBE,MACRT,GAAS2C,EAAAA,EAAAA,GAAUlC,GACpB,EAOKW,KAAK,OACLC,MAAM,kBACNC,KAAK,WAIZ,ECfc,SAASsB,IACtB,IAAM5C,GAAWC,EAAAA,EAAAA,MAMjB,OAJA4C,EAAAA,EAAAA,YAAU,WACR7C,GAAS8C,EAAAA,EAAAA,MACV,GAAE,CAAC9C,KAGF,iCACE,uCACA,SAACJ,EAAD,KACA,sCACA,SAAC6C,EAAD,KACA,SAACT,EAAD,MAGL,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","components/Contact/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"form__label\":\"ContactForm_form__label__8W82B\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/Contacts/operations';\n\nimport css from './ContactForm.module.css';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nexport const ContactForm = () => {\n  const getContacts = state => state.contacts.contacts;\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    const form = event.target;\n    const {\n      0: { value: name },\n      2: { value: number },\n    } = event.currentTarget;\n\n    if (\n      contacts.length > 0 &&\n      contacts.some(contact => contact.name === name)\n    ) {\n      alert(`${name} is alredy in contact`);\n      return;\n    }\n\n    name && number && dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={formSubmitHandler} className={css.form}>\n      <TextField\n        type=\"text\"\n        name=\"name\"\n        label=\"Name\"\n        size=\"small\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      ></TextField>\n\n      <TextField\n        type=\"tel\"\n        name=\"number\"\n        label=\"Number\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      ></TextField>\n\n      <Button variant=\"contained\" size=\"small\" type=\"submit\">\n        Add contact\n      </Button>\n    </form>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/Contacts/operations';\nimport PropTypes from 'prop-types';\n\nimport Button from '@mui/material/Button';\n\nexport const Contact = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <div>\n      {name}: {number}\n      <Button variant=\"contained\" size=\"small\" name={id} onClick={handleDelete}>\n        Delete\n      </Button>\n    </div>\n  );\n};\n\nContact.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  id: PropTypes.string,\n};\n","import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Contact } from 'components/Contact/Contact';\n\nconst getVisibleContacts = (filterValue, contactsList) => {\n  if (filterValue && filterValue !== null && contactsList) {\n    return contactsList.filter(contact => {\n      return contact.name.toLowerCase().includes(filterValue.toLowerCase());\n    });\n  } else {\n    return contactsList;\n  }\n};\n\nexport const ContactList = () => {\n  const contactValue = state => state.contacts;\n  const { contacts } = useSelector(contactValue);\n\n  const getFilter = state => state.filter;\n  const filterValue = useSelector(getFilter);\n\n  const visibleContacts = getVisibleContacts(filterValue, contacts);\n\n  return (\n    <ul>\n      {visibleContacts &&\n        visibleContacts.map(({ id, name, number }) => {\n          return (\n            <li key={id}>\n              <Contact name={name} number={number} id={id} />\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/Contacts/filterSlice';\n\nimport TextField from '@mui/material/TextField';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const setFilterContacts = event => {\n    const { value } = event.currentTarget;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <section>\n\n      <TextField\n        onChange={setFilterContacts}\n        type=\"text\"\n        label=\"Filter contacts\"\n        size=\"small\"\n      ></TextField>\n    </section>\n  );\n};\n\n","import { useEffect} from 'react';\nimport { useDispatch } from 'react-redux'; //useSelector\nimport { fetchContact } from 'redux/Contacts/operations';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContact());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter/>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["ContactForm","contacts","useSelector","state","dispatch","useDispatch","onSubmit","event","preventDefault","form","target","currentTarget","name","value","number","length","some","contact","alert","addContact","reset","className","css","TextField","type","label","size","pattern","title","required","Button","variant","Contact","id","onClick","deleteContact","ContactList","visibleContacts","filterValue","contactsList","filter","toLowerCase","includes","getVisibleContacts","map","Filter","onChange","setFilter","ContactsPage","useEffect","fetchContact"],"sourceRoot":""}